# board.py

from manimlib.imports import *


stepTransitionMatrixOnlyDices = [['0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],['0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],['0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0'],['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0'],['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0'],['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0'],['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0'],['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36'],['1/36','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18'],['1/18','1/36','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12'],['1/12','1/18','1/36','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9'],['1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6','5/36'],['5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36','1/6'],['1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9','5/36'],['5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1/36','1/18','1/12','1/9'],['1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1/36','1/18','1/12'],['1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1/36','1/18'],['1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1/36'],['1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],['0','1/36','1/18','1/12','1/9','5/36','1/6','5/36','1/9','1/12','1/18','1/36','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0']]
stepTransitionMatrixOnlyDices2 = [[0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36],[1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18],[1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12],[1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9],[1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36],[5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6],[1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36],[5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9],[1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12],[1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18],[1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36],[1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]
stepTransitionMatrix = [[0.0121340523882897,0,0.0242681047765794,0.0554699537750385,0.0936055469953775,0.121340523882897,0.138674884437596,0.0624036979969183,0.138674884437596,0.110939907550077,0.0968798151001541,0.0658705701078583,0.038135593220339,0,0,0.0208012326656394,0,0,0,0,0,0,0,0,0.0104006163328197,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0104006163328197],[0.00866718027734977,0,0,0.0277349768875193,0.0641371340523883,0.0918721109399075,0.110939907550077,0.0520030816640986,0.166409861325116,0.138674884437596,0.121147919876733,0.0918721109399075,0.0641371340523883,0.0277349768875193,0,0.0173343605546995,0,0,0,0,0,0,0,0,0.00866718027734977,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.00866718027734977],[0.00693374422187982,0,0,0,0.0346687211093991,0.0624036979969183,0.0832049306625578,0.0416024653312789,0.138674884437596,0.166409861325116,0.147149460708783,0.117873651771957,0.0901386748844376,0.0554699537750385,0.0277349768875193,0.0138674884437596,0,0,0,0,0,0,0,0,0.00693374422187982,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.00693374422187982],[0.00520030816640986,0,0,0,0.00520030816640986,0.0329352850539291,0.0554699537750385,0.0312018489984592,0.110939907550077,0.138674884437596,0.173151001540832,0.143875192604006,0.116140215716487,0.0832049306625578,0.0554699537750385,0.038135593220339,0,0,0,0,0,0,0,0,0.00520030816640986,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.00520030816640986],[0.00346687211093991,0,0,0,0.00346687211093991,0.00346687211093991,0.0277349768875193,0.0208012326656394,0.0832049306625578,0.110939907550077,0.143682588597843,0.169876733436055,0.142141756548536,0.110939907550077,0.0832049306625578,0.0624036979969183,0.0277349768875193,0,0,0,0,0,0,0,0.00346687211093991,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.00346687211093991],[0.00346687211093991,0,0,0,0.00173343605546995,0.00173343605546995,0,0.0104006163328197,0.0554699537750385,0.0832049306625578,0.115947611710324,0.140408320493066,0.168143297380586,0.138674884437596,0.110939907550077,0.0866718027734977,0.0554699537750385,0.0242681047765794,0,0,0,0,0,0,0.00173343605546995,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.00173343605546995],[0.00346687211093991,0,0,0,0,0,0,0,0.0277349768875193,0.0554699537750385,0.0882126348228043,0.110939907550077,0.138674884437596,0.166409861325116,0.138674884437596,0.110939907550077,0.0832049306625578,0.0485362095531587,0.0277349768875193,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0.00520030816640986,0,0,0,0,0,0,0,0,0.0277349768875193,0.062211093990755,0.0832049306625578,0.110939907550077,0.138674884437596,0.166409861325116,0.138674884437596,0.110939907550077,0.0728043143297381,0.0554699537750385,0.0277349768875193,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0.00693374422187982,0,0,0,0,0,0,0,0,0,0.0362095531587057,0.0554699537750385,0.0832049306625578,0.110939907550077,0.138674884437596,0.166409861325116,0.138674884437596,0.0970724191063174,0.0832049306625578,0.0554699537750385,0.0277349768875193,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0.00866718027734977,0,0,0,0,0,0,0,0,0,0.0102080123266564,0.0277349768875193,0.0554699537750385,0.0832049306625578,0.110939907550077,0.138674884437596,0.166409861325116,0.121340523882897,0.110939907550077,0.0832049306625578,0.0554699537750385,0.0277349768875193,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0.0121340523882897,0,0,0,0,0.00173343605546995,0,0,0,0,0.0136748844375963,0.00173343605546995,0.0277349768875193,0.0554699537750385,0.0832049306625578,0.110939907550077,0.138674884437596,0.145608628659476,0.138674884437596,0.112673343605547,0.0832049306625578,0.0554699537750385,0.0104006163328197,0,0.00173343605546995,0.00346687211093991,0,0,0.00173343605546995,0,0,0,0,0,0,0,0,0,0,0.00173343605546995],[0.0121340523882897,0,0,0,0,0.00346687211093991,0,0,0,0,0.0136748844375963,0.00346687211093991,0,0.0277349768875193,0.0554699537750385,0.0832049306625578,0.110939907550077,0.121340523882897,0.166409861325116,0.142141756548536,0.110939907550077,0.0832049306625578,0.0208012326656394,0.0277349768875193,0.00346687211093991,0.00693374422187982,0,0,0.00346687211093991,0,0,0,0,0,0,0,0,0,0,0.00346687211093991],[0.0121340523882897,0,0,0,0,0.00520030816640986,0,0,0,0,0.0136748844375963,0.00520030816640986,0,0,0.0277349768875193,0.0554699537750385,0.0832049306625578,0.0970724191063174,0.138674884437596,0.171610169491525,0.138674884437596,0.110939907550077,0.0312018489984592,0.0554699537750385,0.0329352850539291,0.0104006163328197,0,0,0.00520030816640986,0,0,0,0,0,0,0,0,0,0,0.00520030816640986],[0.0121340523882897,0,0,0,0,0.00693374422187982,0,0,0,0,0.0136748844375963,0.00693374422187982,0,0,0,0.0277349768875193,0.0554699537750385,0.0728043143297381,0.110939907550077,0.145608628659476,0.166409861325116,0.138674884437596,0.0416024653312789,0.0832049306625578,0.0624036979969183,0.0416024653312789,0,0,0.00693374422187982,0,0,0,0,0,0,0,0,0,0,0.00693374422187982],[0.0121340523882897,0,0,0,0,0.00866718027734977,0,0,0,0,0.0136748844375963,0.00866718027734977,0,0,0,0,0.0277349768875193,0.0485362095531587,0.0832049306625578,0.119607087827427,0.138674884437596,0.166409861325116,0.0520030816640986,0.110939907550077,0.0918721109399075,0.0728043143297381,0.0277349768875193,0,0.00866718027734977,0,0,0,0,0,0,0,0,0,0,0.00866718027734977],[0.0121340523882897,0,0,0,0,0.0104006163328197,0,0,0,0,0.0136748844375963,0.0104006163328197,0,0,0,0,0,0.0242681047765794,0.0554699537750385,0.0936055469953775,0.110939907550077,0.138674884437596,0.0624036979969183,0.138674884437596,0.121340523882897,0.104006163328197,0.0554699537750385,0.0277349768875193,0.0104006163328197,0,0,0,0,0,0,0,0,0,0,0.0104006163328197],[0.00866718027734977,0,0,0,0,0.00866718027734977,0,0,0,0,0.0102080123266564,0.00866718027734977,0,0,0,0,0,0,0.0277349768875193,0.0641371340523883,0.0832049306625578,0.110939907550077,0.0520030816640986,0.166409861325116,0.147342064714946,0.128274268104777,0.0832049306625578,0.0554699537750385,0.036402157164869,0,0,0,0,0,0,0,0,0,0,0.00866718027734977],[0.00693374422187982,0,0,0,0,0.00693374422187982,0,0,0,0,0.00847457627118644,0.00693374422187982,0,0,0,0,0,0,0,0.0346687211093991,0.0554699537750385,0.0832049306625578,0.0416024653312789,0.138674884437596,0.173343605546995,0.152542372881356,0.110939907550077,0.0832049306625578,0.0624036979969183,0.0277349768875193,0,0,0,0,0,0,0,0,0,0.00693374422187982],[0.00520030816640986,0,0,0,0,0.00520030816640986,0,0,0,0,0.00674114021571649,0.00520030816640986,0,0,0,0,0,0,0,0.00520030816640986,0.0277349768875193,0.0554699537750385,0.0312018489984592,0.110939907550077,0.143875192604006,0.176810477657935,0.138674884437596,0.110939907550077,0.0884052388289676,0.0554699537750385,0.0277349768875193,0,0,0,0,0,0,0,0,0.00520030816640986],[0.00346687211093991,0,0,0,0,0.00346687211093991,0,0,0,0,0.00500770416024653,0.00346687211093991,0,0,0,0,0,0,0,0.00346687211093991,0,0.0277349768875193,0.0208012326656394,0.0832049306625578,0.114406779661017,0.145608628659476,0.166409861325116,0.138674884437596,0.114406779661017,0.0832049306625578,0.0554699537750385,0.0277349768875193,0,0,0,0,0,0,0,0.00346687211093991],[0.00173343605546995,0,0,0,0,0.00173343605546995,0,0,0,0,0.00327426810477658,0.00173343605546995,0,0,0,0,0,0,0,0.00173343605546995,0,0,0.0104006163328197,0.0554699537750385,0.0849383667180277,0.114406779661017,0.138674884437596,0.166409861325116,0.140408320493066,0.110939907550077,0.0832049306625578,0.0554699537750385,0.0277349768875193,0,0,0,0,0,0,0.00173343605546995],[0.00173343605546995,0,0,0,0,0,0,0,0,0,0.00327426810477658,0,0,0,0,0,0,0,0,0,0,0,0,0.0277349768875193,0.0554699537750385,0.0832049306625578,0.110939907550077,0.138674884437596,0.166409861325116,0.138674884437596,0.110939907550077,0.0832049306625578,0.0554699537750385,0.0242681047765794,0,0,0,0,0,0],[0.00346687211093991,0,0,0,0,0,0,0,0,0,0.00500770416024653,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0277349768875193,0.0554699537750385,0.0832049306625578,0.110939907550077,0.138674884437596,0.166409861325116,0.138674884437596,0.110939907550077,0.0832049306625578,0.0485362095531587,0.0277349768875193,0,0,0,0,0],[0.00520030816640986,0,0,0,0,0,0,0,0,0,0.00674114021571649,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0277349768875193,0.0554699537750385,0.0832049306625578,0.110939907550077,0.138674884437596,0.166409861325116,0.138674884437596,0.110939907550077,0.0728043143297381,0.0554699537750385,0.0277349768875193,0,0,0,0],[0.00866718027734977,0,0,0,0,0.00520030816640986,0,0,0,0,0.0102080123266564,0.00173343605546995,0.00173343605546995,0,0,0,0,0,0,0,0,0,0,0,0.00173343605546995,0,0.0277349768875193,0.0554699537750385,0.0832049306625578,0.110939907550077,0.138674884437596,0.166409861325116,0.138674884437596,0.0988058551617874,0.0832049306625578,0.0554699537750385,0.0104006163328197,0,0,0.00173343605546995],[0.0121340523882897,0,0,0,0,0.0104006163328197,0,0,0,0,0.0136748844375963,0.00346687211093991,0.00346687211093991,0,0,0,0,0,0,0,0,0,0,0,0.00346687211093991,0,0,0.0277349768875193,0.0554699537750385,0.0832049306625578,0.110939907550077,0.138674884437596,0.166409861325116,0.124807395993837,0.110939907550077,0.0832049306625578,0.0208012326656394,0.0277349768875193,0,0.00346687211093991],[0.0156009244992296,0,0,0,0,0.0156009244992296,0,0,0,0,0.0171417565485362,0.00520030816640986,0.00520030816640986,0,0,0,0,0,0,0,0,0,0,0,0.00520030816640986,0,0,0,0.0277349768875193,0.0554699537750385,0.0832049306625578,0.110939907550077,0.138674884437596,0.150808936825886,0.138674884437596,0.110939907550077,0.0312018489984592,0.0554699537750385,0.0277349768875193,0.00520030816640986],[0.0156009244992296,0,0,0,0,0.0208012326656394,0,0,0,0,0.0171417565485362,0.00693374422187982,0.00693374422187982,0,0,0,0,0,0,0,0,0,0,0,0.00693374422187982,0,0,0,0,0.0277349768875193,0.0554699537750385,0.0832049306625578,0.110939907550077,0.128274268104777,0.166409861325116,0.138674884437596,0.0416024653312789,0.0832049306625578,0.0554699537750385,0.0346687211093991],[0.0433359013867488,0,0,0,0,0.0260015408320493,0,0,0,0,0.0171417565485362,0.00866718027734977,0.00866718027734977,0,0,0,0,0,0,0,0,0,0,0,0.00866718027734977,0,0,0,0,0,0.0277349768875193,0.0554699537750385,0.0832049306625578,0.105739599383667,0.138674884437596,0.166409861325116,0.0520030816640986,0.110939907550077,0.0832049306625578,0.0641371340523883],[0.0710708782742681,0.0277349768875193,0,0,0,0.0312018489984592,0,0,0,0,0.0171417565485362,0.0104006163328197,0.0104006163328197,0,0,0,0,0,0,0,0,0,0,0,0.0104006163328197,0,0,0,0,0,0,0.0277349768875193,0.0554699537750385,0.0832049306625578,0.110939907550077,0.138674884437596,0.0624036979969183,0.138674884437596,0.110939907550077,0.0936055469953775],[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0.123073959938367,0.0832049306625578,0.0485362095531587,0.0277349768875193,0,0.0208012326656394,0,0,0,0,0.0136748844375963,0.00693374422187982,0.00693374422187982,0,0,0,0,0,0,0,0,0,0,0,0.00693374422187982,0,0,0,0,0,0,0,0,0.0312018489984592,0.0554699537750385,0.0832049306625578,0.0416024653312789,0.138674884437596,0.166409861325116,0.145608628659476],[0.149075500770416,0.110939907550077,0.0728043143297381,0.0554699537750385,0.0277349768875193,0.0156009244992296,0,0,0,0,0.0119414483821263,0.00520030816640986,0.00520030816640986,0,0,0,0,0,0,0,0,0,0,0,0.00520030816640986,0,0,0,0,0,0,0,0,0.00520030816640986,0.0277349768875193,0.0554699537750385,0.0312018489984592,0.110939907550077,0.138674884437596,0.171610169491525],[0.176810477657935,0.138674884437596,0.0970724191063174,0.0832049306625578,0.0554699537750385,0.038135593220339,0,0,0,0,0.0119414483821263,0.00346687211093991,0.00346687211093991,0,0,0,0,0,0,0,0,0,0,0,0.00346687211093991,0,0,0,0,0,0,0,0,0.00346687211093991,0,0.0277349768875193,0.0208012326656394,0.0832049306625578,0.110939907550077,0.142141756548536],[0.149075500770416,0.166409861325116,0.121340523882897,0.110939907550077,0.0832049306625578,0.0606702619414484,0.0277349768875193,0,0,0,0.0119414483821264,0.00173343605546995,0.00173343605546995,0,0,0,0,0,0,0,0,0,0,0,0.00173343605546995,0,0,0,0,0,0,0,0,0.00173343605546995,0,0,0.0104006163328197,0.0554699537750385,0.0832049306625578,0.112673343605547],[0.123073959938367,0.138674884437596,0.145608628659476,0.138674884437596,0.112673343605547,0.0849383667180277,0.0554699537750385,0.0104006163328197,0,0,0.0136748844375963,0.00173343605546995,0.00173343605546995,0,0,0.00346687211093991,0,0,0,0,0,0,0,0,0.00173343605546995,0,0,0,0,0,0,0,0,0,0,0,0,0.0277349768875193,0.0554699537750385,0.0849383667180277],[0.0953389830508475,0.110939907550077,0.121340523882897,0.166409861325116,0.142141756548536,0.114406779661017,0.0832049306625578,0.0208012326656394,0.0277349768875193,0,0.0136748844375963,0.00346687211093991,0.00346687211093991,0,0,0.00693374422187982,0,0,0,0,0,0,0,0,0.00346687211093991,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0277349768875193,0.0589368258859784],[0.0676040061633282,0.0832049306625578,0.0970724191063174,0.138674884437596,0.171610169491525,0.143875192604006,0.110939907550077,0.0312018489984592,0.0554699537750385,0.0277349768875193,0.0136748844375963,0.00520030816640986,0.00520030816640986,0,0,0.0104006163328197,0,0,0,0,0,0,0,0,0.00520030816640986,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0329352850539291],[0.0398690292758089,0.0554699537750385,0.0728043143297381,0.110939907550077,0.145608628659476,0.173343605546995,0.138674884437596,0.0416024653312789,0.0832049306625578,0.0554699537750385,0.0414098613251156,0.00693374422187982,0.00693374422187982,0,0,0.0138674884437596,0,0,0,0,0,0,0,0,0.00693374422187982,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.00693374422187982],[0.0121340523882897,0.0277349768875193,0.0485362095531587,0.0832049306625578,0.119607087827427,0.147342064714946,0.166409861325116,0.0520030816640986,0.110939907550077,0.0832049306625578,0.0691448382126348,0.036402157164869,0.00866718027734977,0,0,0.0173343605546995,0,0,0,0,0,0,0,0,0.00866718027734977,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.00866718027734977]]
stepTransitionMatrixDicesAndChests = [[7/576,0,7/288,1/18,3/32,35/288,5/36,1/16,5/36,1/9,55/576,19/288,11/288,0,0,1/48,0,0,0,0,0,0,0,0,1/96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/96],[5/576,0,0,1/36,37/576,53/576,1/9,5/96,1/6,5/36,23/192,53/576,37/576,1/36,0,5/288,0,0,0,0,0,0,0,0,5/576,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5/576],[1/144,0,0,0,5/144,1/16,1/12,1/24,5/36,1/6,7/48,17/144,13/144,1/18,1/36,1/72,0,0,0,0,0,0,0,0,1/144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/144],[1/192,0,0,0,1/192,19/576,1/18,1/32,1/9,5/36,11/64,83/576,67/576,1/12,1/18,11/288,0,0,0,0,0,0,0,0,1/192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/192],[1/288,0,0,0,1/288,1/288,1/36,1/48,1/12,1/9,41/288,49/288,41/288,1/9,1/12,1/16,1/36,0,0,0,0,0,0,0,1/288,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/288],[1/288,0,0,0,1/576,1/576,0,1/96,1/18,1/12,11/96,9/64,97/576,5/36,1/9,25/288,1/18,7/288,0,0,0,0,0,0,1/576,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/576],[1/288,0,0,0,0,0,0,0,1/36,1/18,25/288,1/9,5/36,1/6,5/36,1/9,1/12,7/144,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1/192,0,0,0,0,0,0,0,0,1/36,35/576,1/12,1/9,5/36,1/6,5/36,1/9,7/96,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[1/144,0,0,0,0,0,0,0,0,0,5/144,1/18,1/12,1/9,5/36,1/6,5/36,7/72,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[5/576,0,0,0,0,0,0,0,0,0,5/576,1/36,1/18,1/12,1/9,5/36,1/6,35/288,1/9,1/12,1/18,1/36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[7/576,0,0,0,0,1/576,0,0,0,0,7/576,1/576,1/36,1/18,1/12,1/9,5/36,7/48,5/36,65/576,1/12,1/18,1/96,0,1/576,1/288,0,0,1/576,0,0,0,0,0,0,0,0,0,0,1/576],[7/576,0,0,0,0,1/288,0,0,0,0,7/576,1/288,0,1/36,1/18,1/12,1/9,35/288,1/6,41/288,1/9,1/12,1/48,1/36,1/288,1/144,0,0,1/288,0,0,0,0,0,0,0,0,0,0,1/288],[7/576,0,0,0,0,1/192,0,0,0,0,7/576,1/192,0,0,1/36,1/18,1/12,7/72,5/36,11/64,5/36,1/9,1/32,1/18,19/576,1/96,0,0,1/192,0,0,0,0,0,0,0,0,0,0,1/192],[7/576,0,0,0,0,1/144,0,0,0,0,7/576,1/144,0,0,0,1/36,1/18,7/96,1/9,7/48,1/6,5/36,1/24,1/12,1/16,1/24,0,0,1/144,0,0,0,0,0,0,0,0,0,0,1/144],[7/576,0,0,0,0,5/576,0,0,0,0,7/576,5/576,0,0,0,0,1/36,7/144,1/12,23/192,5/36,1/6,5/96,1/9,53/576,7/96,1/36,0,5/576,0,0,0,0,0,0,0,0,0,0,5/576],[7/576,0,0,0,0,1/96,0,0,0,0,7/576,1/96,0,0,0,0,0,7/288,1/18,3/32,1/9,5/36,1/16,5/36,35/288,5/48,1/18,1/36,1/96,0,0,0,0,0,0,0,0,0,0,1/96],[5/576,0,0,0,0,5/576,0,0,0,0,5/576,5/576,0,0,0,0,0,0,1/36,37/576,1/12,1/9,5/96,1/6,85/576,37/288,1/12,1/18,7/192,0,0,0,0,0,0,0,0,0,0,5/576],[1/144,0,0,0,0,1/144,0,0,0,0,1/144,1/144,0,0,0,0,0,0,0,5/144,1/18,1/12,1/24,5/36,25/144,11/72,1/9,1/12,1/16,1/36,0,0,0,0,0,0,0,0,0,1/144],[1/192,0,0,0,0,1/192,0,0,0,0,1/192,1/192,0,0,0,0,0,0,0,1/192,1/36,1/18,1/32,1/9,83/576,17/96,5/36,1/9,17/192,1/18,1/36,0,0,0,0,0,0,0,0,1/192],[1/288,0,0,0,0,1/288,0,0,0,0,1/288,1/288,0,0,0,0,0,0,0,1/288,0,1/36,1/48,1/12,11/96,7/48,1/6,5/36,11/96,1/12,1/18,1/36,0,0,0,0,0,0,0,1/288],[1/576,0,0,0,0,1/576,0,0,0,0,1/576,1/576,0,0,0,0,0,0,0,1/576,0,0,1/96,1/18,49/576,11/96,5/36,1/6,9/64,1/9,1/12,1/18,1/36,0,0,0,0,0,0,1/576],[1/576,0,0,0,0,0,0,0,0,0,1/576,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,1/18,7/288,0,0,0,0,0,0],[1/288,0,0,0,0,0,0,0,0,0,1/288,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,1/12,7/144,1/36,0,0,0,0,0],[1/192,0,0,0,0,0,0,0,0,0,1/192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,1/9,7/96,1/18,1/36,0,0,0,0],[5/576,0,0,0,0,1/192,0,0,0,0,5/576,1/576,1/576,0,0,0,0,0,0,0,0,0,0,0,1/576,0,1/36,1/18,1/12,1/9,5/36,1/6,5/36,19/192,1/12,1/18,1/96,0,0,1/576],[7/576,0,0,0,0,1/96,0,0,0,0,7/576,1/288,1/288,0,0,0,0,0,0,0,0,0,0,0,1/288,0,0,1/36,1/18,1/12,1/9,5/36,1/6,1/8,1/9,1/12,1/48,1/36,0,1/288],[1/64,0,0,0,0,1/64,0,0,0,0,1/64,1/192,1/192,0,0,0,0,0,0,0,0,0,0,0,1/192,0,0,0,1/36,1/18,1/12,1/9,5/36,29/192,5/36,1/9,1/32,1/18,1/36,1/192],[1/64,0,0,0,0,1/48,0,0,0,0,1/64,1/144,1/144,0,0,0,0,0,0,0,0,0,0,0,1/144,0,0,0,0,1/36,1/18,1/12,1/9,37/288,1/6,5/36,1/24,1/12,1/18,5/144],[25/576,0,0,0,0,5/192,0,0,0,0,1/64,5/576,5/576,0,0,0,0,0,0,0,0,0,0,0,5/576,0,0,0,0,0,1/36,1/18,1/12,61/576,5/36,1/6,5/96,1/9,1/12,37/576],[41/576,1/36,0,0,0,1/32,0,0,0,0,1/64,1/96,1/96,0,0,0,0,0,0,0,0,0,0,0,1/96,0,0,0,0,0,0,1/36,1/18,1/12,1/9,5/36,1/16,5/36,1/9,3/32],[0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[71/576,1/12,7/144,1/36,0,1/48,0,0,0,0,7/576,1/144,1/144,0,0,0,0,0,0,0,0,0,0,0,1/144,0,0,0,0,0,0,0,0,1/32,1/18,1/12,1/24,5/36,1/6,7/48],[43/288,1/9,7/96,1/18,1/36,1/64,0,0,0,0,1/96,1/192,1/192,0,0,0,0,0,0,0,0,0,0,0,1/192,0,0,0,0,0,0,0,0,1/192,1/36,1/18,1/32,1/9,5/36,11/64],[17/96,5/36,7/72,1/12,1/18,11/288,0,0,0,0,1/96,1/288,1/288,0,0,0,0,0,0,0,0,0,0,0,1/288,0,0,0,0,0,0,0,0,1/288,0,1/36,1/48,1/12,1/9,41/288],[43/288,1/6,35/288,1/9,1/12,35/576,1/36,0,0,0,1/96,1/576,1/576,0,0,0,0,0,0,0,0,0,0,0,1/576,0,0,0,0,0,0,0,0,1/576,0,0,1/96,1/18,1/12,65/576],[71/576,5/36,7/48,5/36,65/576,49/576,1/18,1/96,0,0,7/576,1/576,1/576,0,0,1/288,0,0,0,0,0,0,0,0,1/576,0,0,0,0,0,0,0,0,0,0,0,0,1/36,1/18,49/576],[55/576,1/9,35/288,1/6,41/288,11/96,1/12,1/48,1/36,0,7/576,1/288,1/288,0,0,1/144,0,0,0,0,0,0,0,0,1/288,0,0,0,0,0,0,0,0,0,0,0,0,0,1/36,17/288],[13/192,1/12,7/72,5/36,11/64,83/576,1/9,1/32,1/18,1/36,7/576,1/192,1/192,0,0,1/96,0,0,0,0,0,0,0,0,1/192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19/576],[23/576,1/18,7/96,1/9,7/48,25/144,5/36,1/24,1/12,1/18,23/576,1/144,1/144,0,0,1/72,0,0,0,0,0,0,0,0,1/144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/144],[7/576,1/36,7/144,1/12,23/192,85/576,1/6,5/96,1/9,1/12,13/192,7/192,5/576,0,0,5/288,0,0,0,0,0,0,0,0,5/576,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5/576]]
steadyStates = ['0.03019217961687','0.0209184308490812','0.0184555834726644','0.021226348602077','0.0228184217333933','0.0290574652478607','0.0221672666816017','0.00849535499747166','0.022758173176682','0.0225967832939226','0.058695250988287','0.0265308058270322','0.0255073038685513','0.0231946053626604','0.0240249948852719','0.0284394064977992','0.027106051156823','0.0251374522525191','0.0284798138058179','0.0299635643237349','0.0280350787605426','0.0275876681092128','0.0102061281640021','0.0266593474680881','0.0310386626793199','0.0298430694492964','0.0263608206567639','0.0260895357426696','0.0273616170958329','0.0252137280056232','0.0257113863387056','0.0261267407207795','0.0256102688964576','0.0232817972653453','0.0244034834842325','0.0237765783699494','0.00847193339973746','0.0214073013391006','0.0213186057479661','0.0257309916662524',]
steadyStatesRanked =  [0.058695251, 0.031038663, 0.030192180, 0.029963564, 0.029843069, 0.029057465, 0.028479814, 0.028439406, 0.028035079, 0.027587668, 0.027361617, 0.027106051, 0.026659347, 0.026530806, 0.026360821, 0.026126741, 0.026089536, 0.025730992, 0.025711386, 0.025610269, 0.025507304, 0.025213728, 0.025137452, 0.024403483, 0.024024995, 0.023776578, 0.023281797, 0.023194605, 0.022818422, 0.022758173, 0.022596783, 0.022167267, 0.021407301, 0.021318606, 0.021226349, 0.020918431, 0.018455583, 0.010206128, 0.008495355, 0.008471933]
steadyStatesRank =  ["11", "25",  "1", "20", "26",  "6", "19", "16", "21", "22", "29", "17", "24", "12", "27", "32", "28", "40", "31", "33", "13", "30", "18", "35", "15", "36", "34", "14",  "5",  "9", "10",  "7", "38", "39",  "4", "2",  "3", "23",  "8", "37"]

properties = [0,MONOPOLY_RED,0,MONOPOLY_RED,MONOPOLY_RED,0,MONOPOLY_YELLOW,MONOPOLY_YELLOW,0,MONOPOLY_YELLOW,0,MONOPOLY_GREEN,MONOPOLY_GREEN,0,MONOPOLY_GREEN,0,0,MONOPOLY_BLUE,0,MONOPOLY_BLUE,0,MONOPOLY_BROWN,0,MONOPOLY_BROWN,0,0,MONOPOLY_LIGHT_BLUE,0,MONOPOLY_LIGHT_BLUE,MONOPOLY_LIGHT_BLUE,0,MONOPOLY_PINK,0,MONOPOLY_PINK,MONOPOLY_PINK,0,MONOPOLY_ORANGE,0,MONOPOLY_ORANGE,MONOPOLY_ORANGE]
names1 = ["Free Park","Kentucky Ave.","Chance","Indiana Ave.","Illinois Ave.","B. and O. Railroad","Atlantic Ave.","Vermont Ave.","Water Works","Marvin Gardens","Go To Jail",
  "Pacific Ave.","North Carolina Ave.","Community Chest","Pennsylvania Ave.","Short Line","Chance","Park Place","Luxury Tax","Broadwalk","Go",
  "Mediterranean Ave.","Community Chest","Baltic Ave.","Income Tax","Reading Railroad","Oriental Ave.","Chance","Vermont Ave.","Connecticut Ave.","Jail",
  "St. Charles Place","Electric Company","States Ave.","Virginia Ave.","Pennsylvania Railroad","St. James Place","Community Chest","Tennessee Ave.","New York Ave."
]
names = ["\\textbf{"+name+"}" for name in names1]
textNames = [TextMobject(names[i]) for i in range(len(names))]



# CREATION RELATED FUNCTIONS

def create_little_square(i):
  return Rectangle(width=(spaceShortSide if (i==0 or i==2) else spaceLongSide), height=(spaceLongSide if (i==0 or i==2) else spaceShortSide))



def create_tiny_square(i,j):
  b = properties[10*i+j+1]
  rectangle = 0
  c = WHITE if (b == 0) else b
  if i == 0 or i == 2:
    rectangle = Rectangle(fill_opacity=1, width = spaceShortSide, height = spaceShortSide/2)
  elif i == 1 or i == 3:
    rectangle = Rectangle(fill_opacity=1, height = spaceShortSide, width  = spaceShortSide/2)
  rectangle.set_fill(c)
  return rectangle



def has_property(space):
  if properties[space-1] != 0:
    return True
  else:
    return False



def check_property(tupla):
  return has_property(10*tupla[0]+2+tupla[1])


# constants
spaceShortSide = 1/2*FRAME_HEIGHT/13
spaceLongSide = spaceShortSide*2
directionsToPlaceLS = [RIGHT, DOWN, LEFT, UP]
directionsForTS = [DOWN, LEFT, UP, RIGHT]
corners = [UL, UR, DR, DL]
rotationsForLS = [PI/2, 0, PI/2, 0]
rotationsForBS = [UP,RIGHT,DOWN,LEFT]
coordinatesOfSquares = []

# main squares
mainBoard = Square(side_length = 1/2*FRAME_HEIGHT)
bigSquares = [Square(side_length=spaceLongSide) for _ in range(4)]
littleSquares = [[create_little_square(i) for _ in range(9)] for i in range(4)]
tinySquares = [[create_tiny_square(i,j) for j in range(9)] for i in range(4)]
nonProperties = [[1,0,1,1,0,1,1,0,1],[1,1,0,1,0,0,1,0,1],[1,0,1,0,0,1,0,1,1],[1,0,1,1,0,1,0,1,1]]

# strokes set up
mainBoard.set_stroke(width=2)
for i in range(4):
  bigSquares[i].set_stroke(width=2)
  for j in range(9):
    littleSquares[i][j].set_stroke(width=2)
    if not nonProperties[i][j]:
      tinySquares[i][j] = 0
    else:
      tinySquares[i][j].set_stroke(width=2)

# groups set up
textGroup = Group(*[textNames[i] for i in range(len(textNames))])
boardGroup = Group(
  mainBoard,
  *[bigSquares[i] for i in range(len(bigSquares))],
  *[littleSquares[i][j] for i in range(4) for j in range(9)],
  *[tinySquares[i][j] for (i,j) in filter(check_property, [(i,j) for i in range(4) for j in range(9)])]
)
boardAndTextGroup = Group(boardGroup, textGroup)



# Applies function to bigSquares and littleSquares. Used to fade in
def apply_function_squares(self, func, runTime):
  self.play(
    func(mainBoard),
    *[func(bigSquares[i]) for i in range(len(bigSquares))],
    *[func(littleSquares[i][j]) for i in range(4) for j in range(9)],
    run_time = runTime)



# Applies function to corner texts
def apply_function_big_texts(self, func, runTime=1.5):
  self.play(
    *[Write(textNames[10*i], run_time=runTime) for i in range(4)])



# Builds tinySquares and square names by fading in or progressively writing
def build_texts(self, texts, showCreation, runTime=3):
  phdot = Dot()
  phdot.move_to((100,100,0))
  if not showCreation:
    self.play(
      *[(FadeIn(tinySquares[i][j]) if has_property(10*i+2+j) else FadeIn(phdot)) for i in range(4) for j in range(9)],
      *[((FadeIn(textNames[i])) if texts else FadeIn(phdot)) for i in range(40)],
      run_time=runTime)
  else:
    for j in range(len(littleSquares[0])):
      self.play(
        *[(FadeIn(tinySquares[i][j]) if has_property(10*i+2+j) else FadeIn(phdot)) for i in range(4)],
        *[((Write(textNames[i])) if texts else FadeIn(phdot)) for i in range(40)],
        run_time=runTime/5)



# Applies function to all texts
def apply_function_texts(self, func, runTime=1.5):
  self.play(
    *[func(textNames[i]) for i in range(len(textNames))],
    run_time=runTime)



# Applies function to all board squares NOT including texts
def apply_function_board(self, func, runTime=1.5):
  self.play(
    func(mainBoard),
    *[func(bigSquares[i]) for i in range(len(bigSquares))],
    *[func(littleSquares[i][j]) for i in range(4) for j in range(9)],
    *[func(tinySquares[i][j]) for (i,j) in filter(check_property, [(i,j) for i in range(4) for j in range(9)])],
    run_time= runTime)



# Applies function to all board squares including texts
def apply_function_board_and_texts(self, func, runTime=1.5):
  self.play(
    func(mainBoard),
    *[func(bigSquares[i]) for i in range(len(bigSquares))],
    *[func(littleSquares[i][j]) for i in range(4) for j in range(9)],
    *[func(tinySquares[i][j]) for (i,j) in filter(check_property, [(i,j) for i in range(4) for j in range(9)])],
    *[func(textNames[i]) for i in range(len(textNames))],
    run_time= runTime)



# Arranges board squares for visualization
def setup_board(self):
  # mainBoard.to_edge(RIGHT, buff=2)
  for i in range(4):
    bigSquares[i].move_to(mainBoard, aligned_edge = corners[i])
  for i in range(4):
    littleSquares[i][0].next_to(bigSquares[i], direction=directionsToPlaceLS[i], buff=0)
    tinySquares[i][0].move_to(littleSquares[i][0], aligned_edge=directionsForTS[i])
  for j in range(len(littleSquares[0])-1):
    for i in range(4):
      littleSquares[i][j+1].next_to(littleSquares[i][j], direction=directionsToPlaceLS[i], buff=0)  
      if nonProperties[i][j+1]:
        tinySquares[i][j+1].move_to(littleSquares[i][j+1], aligned_edge=directionsForTS[i])
  for i in range(len(textNames)):
    textNames[i].scale(.35)
    textNames[i].rotate(rotationsForLS[i//10])
    # textNames[i].set_color(properties[i] if (properties[i] != 0) else WHITE)
    textNames[i].next_to(get_move_coords(i), direction=rotationsForBS[i//10], buff=.06)
  bigSquareShiftDirection = [(-.2,.2,0), (.2,.2,0), (.2,-.2,0), (-.2,-.2,0)]
  for i in range(4):
    textNames[10*i].move_to(get_move_coords(10*i).get_corner(direction=corners[i])+bigSquareShiftDirection[i])
    textNames[10*i].rotate(-PI/4)



# Shows board [and texts, depending on texts value]
def show_board(self, texts, runTime=3):
  # self.play(ShowCreation(mainBoard), run_time=.75)
  if texts:
    apply_function_board_and_texts(self, FadeIn, runTime)
  else:
    apply_function_squares(self, FadeIn, (0.8*runTime) if not texts else 0.4*runTime)
  # if texts:
    # apply_function_big_texts(self, Write, 0.25*runTime) # writes corner texts 
    # build_texts(self, texts, False, 0.4*runTime) # writes all other texts and fades in tiny squares


# Prepares every board object for being scaled and shifted
def setup_mobject(self, mobject, sf, coords, mainBoard):
  mobject.generate_target()
  mobject.target.scale(sf, about_point=mainBoard.get_center())
  mobject.target.set_stroke(width=mobject.get_stroke_width()*sf)
  mobject.target.shift(coords)



# Scales and shifts the board
def scale_and_shift_board(self, scale_factor, coords, texts=True, runTime=1.5):
  abPtDict = dict()
  abPtDict["about_point"] = mainBoard.get_center()
  sf = scale_factor
  setup_mobject(self, mainBoard, sf, coords, mainBoard)
  for i in range(4):
    setup_mobject(self, bigSquares[i], sf, coords, mainBoard)
    for j in range(9):
      setup_mobject(self, littleSquares[i][j], sf, coords, mainBoard)
      if nonProperties[i][j]:
        setup_mobject(self, tinySquares[i][j], sf, coords, mainBoard)
  if texts:
    for i in range(40):
      textNames[i].generate_target()
      textNames[i].target.scale(sf, about_point=mainBoard.get_center())
      textNames[i].target.shift(coords)
    apply_function_board_and_texts(self, MoveToTarget, runTime)
  else:
    apply_function_board(self, MoveToTarget, runTime)



# Gets auxiliar coords for ith square
def get_move_coords(i):
  if i % 10 == 0:
    return bigSquares[i//10]
  else:
    return littleSquares[i//10][i-(10*(i//10))-1]



# sets up coordinates list
def initialize_coordinates(self):
  coordinatesOfSquares = []
  for i in range(40):
    coordinatesOfSquares.append(get_move_coords((i+20)%40).get_center()+0.06*rotationsForBS[((i+20)%40)//10])
    if i % 10 == 0:
      coordinatesOfSquares[i] += 0.06*rotationsForBS[((((i+20)%40)//10)-1)%4]
  return coordinatesOfSquares



# Creates a player at the given square(Dot)
def create_player(self, square, coordinatesOfSquares): # square 1 through 40
  player = Dot(coordinatesOfSquares[square-1], radius=littleSquares[0][0].get_width()/4, fill_opacity=1)
  self.play(FadeIn(player), runTime=.3)
  return player



chainStates = [str(i+1) for i in range(40)]
chainStatesNames = [str(i+1)+","+str(j+1) for i in range(40) for j in range(40)]
chainTransitionMatrix = stepTransitionMatrix

def generate_next_square(currentSquare, full_matrix = True):
  # return np.random.choice(range(1,41),replace=True,p=chainTransitionMatrix[currentSquare-1])
  return np.random.choice(range(1,41),replace=True,p=(stepTransitionMatrix[currentSquare-1] if full_matrix else stepTransitionMatrixOnlyDices2[currentSquare-1]))



EDGE_NUMBER_SCALE_FACTOR = 0.5
squareChoices = [0 for _ in range(40)]
animationTexts = []
# Generates sequence of squares consistent with dice probability.
def generate_sequence(startingSquare, nTurns):
  np.random.seed()
  squares = [startingSquare]
  for i in range(nTurns):
    choice = generate_next_square(squares[i])
    squares.append(choice)
  # dices = [2,3,3,4,4,4,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,8,8,8,8,8,9,9,9,9,10,10,10,11,11,12]
  # for i in range(nTurns):
  #   squares.append((squares[i]+dices[random.randint(0, 35)] - 1)%40+1)
  #   if squares[i+1] == 31:
  #     squares[i+1] == 11
  return squares

def get_square_scale_factor(square):
  return EDGE_NUMBER_SCALE_FACTOR*(1/(square//100+1))

def decide_action(self, i, centerType, squares, things, thingsGroup, player, runTimes, coordinatesOfSquares, animationTexts, squareChoices):
  if centerType == 0:
    self.play(ApplyMethod(player.move_to, coordinatesOfSquares[squares[i]-1]),
      (FadeIn(things[0]) if i==0 else Transform(things[0], things[i])), run_time=runTimes[i])
  elif centerType == 1:
    self.play(ApplyMethod(player.move_to, coordinatesOfSquares[squares[i]-1]),
      (FadeIn(thingsGroup) if i==0 else Transform(things[0], things[i])), run_time=runTimes[i])
  elif centerType == 2:
    self.play(ApplyMethod(player.move_to, coordinatesOfSquares[squares[i]-1]),
      (FadeIn(things[0]) if i==0 else Transform(things[0], things[i])), run_time=runTimes[i])
  elif centerType == 3:
    animations = []
    if i==0:
      animations = [FadeIn(x) for x in animationTexts]
    # self.play(ApplyMethod(player.move_to, coordinatesOfSquares[squares[i]-1], run_time=runTimes[i]),
      # AnimationGroup(*animations, run_time=.5) if i==0 else Transform(animationTexts[squares[i]-1], TextMobject("\\textbf{"+str(squareChoices[squares[i]-1])+"}").scale(.5).move_to(animationTexts[squares[i]-1]), run_time=runTimes[i]))
    self.play(
      AnimationGroup(*animations, run_time=.5) if i==0 else Transform(animationTexts[squares[i]-1], TextMobject("\\textbf{"+str(squareChoices[squares[i]-1])+"}").scale(get_square_scale_factor(squareChoices[squares[i]-1])).move_to(animationTexts[squares[i]-1]), run_time=runTimes[i]))
    # self.wait(.01)

def fade_out_center(self, centerType, things, thingsGroup):
  if centerType == 1:
    self.play(FadeOut(thingsGroup))
  elif centerType != 3:
    self.play(FadeOut(things[0]))


# Moves the player along the given square sequence
def player_square_sequence(self, player, firstSquare, squares, centerType, coordinatesOfSquares, runTime=1.5): # 0 for +x, 1 for turns, 2 for dices
  turns = []
  texts = []
  places = []
  things = []
  thingsGroup = []
  squareChoices = [0 for _ in range(40)]
  animationTexts = []
  print(squares)
  if centerType == 0:
    sign = "-" if (squares[0] == (firstSquare-4)%40+1) else "+"
    distance = squares[0]-firstSquare if squares[0] >= firstSquare else squares[0]-firstSquare+40
    things.append(TextMobject(sign + str(distance if sign == "+" else 3)))
    things[0].move_to(mainBoard.get_center())
    things[0].scale(.75)
  elif centerType==1:
    things.append(TextMobject("0", color=WHITE))
    turnsText = TextMobject("Turns:$\\ \\ $", color=WHITE)
    thingsGroup = VGroup(turnsText, things[0]).arrange(RIGHT, buff=0.4)
    thingsGroup.move_to(mainBoard.get_center())
    thingsGroup.scale(.5)
  elif centerType==2:
    things.append(TextMobject(names[(firstSquare+19)%40], color=properties[(firstSquare+19)%40] if properties[(firstSquare+19)%40]!=0 else WHITE))
    things[0].move_to(mainBoard.get_center())
    things[0].scale(.4)
  elif centerType==3:
    for i in range(40):
      text = "\\textbf{0}"
      zero = TextMobject(text).scale(EDGE_NUMBER_SCALE_FACTOR).move_to(coordinatesOfSquares[i])
      animationTexts.append(zero)
  for i in range(len(squares)):
    if i > 0:
      if centerType == 0:
        sign = "-" if (squares[i] == (squares[i-1]-4)%40+1) else "+"
        distance = squares[i]-squares[i-1] if squares[i] >= squares[i-1] else squares[i]-squares[i-1]+40
        things.append(TextMobject(sign + str(distance if sign == "+" else 3)))
        things[i].move_to(mainBoard.get_center())
      elif centerType == 1:
        things.append(TextMobject(str(i), color=WHITE))
        things[i].move_to(things[0].get_center())
        things[i].scale(.5)
      elif centerType==2:
        things.append(TextMobject(names[(squares[i]+19)%40], color=properties[(squares[i]+19)%40] if properties[(squares[i]+19)%40]!=0 else WHITE))
        things[i].move_to(mainBoard.get_center())
        things[i].scale(.4)
      elif centerType==3:
        squareChoices[squares[i]-1] += 1
    decide_action(self, i, centerType, squares, things, thingsGroup, player, runTime, coordinatesOfSquares, animationTexts, squareChoices)
    if i==0:
      self.wait(.3)
  self.wait(.2)
  fade_out_center(self, centerType, things, thingsGroup)


def set_player(self, startingSquare, nTurns, centerType, player, runTime=.5, variateRunTime=False, sequence=[]):
  runTimes = []
  if variateRunTime:
    maxStep = 0.5
    x = math.floor(nTurns/3)
    runTimes = [runTime for i in range(nTurns-x+1)]
    k = (maxStep/runTime-1)/x
    runTimes += [i*runTime for i in list(np.arange(1, maxStep/runTime+k, k))]
  else:
    runTimes = [runTime for i in range(nTurns+1)]
  coordinatesOfSquares = initialize_coordinates(self)
  if player == 0:
    player = create_player(self, startingSquare, coordinatesOfSquares)
  if not sequence:
    sequence = generate_sequence(startingSquare, nTurns)
  player_square_sequence(self, player, startingSquare, sequence, centerType, coordinatesOfSquares, runTimes)
  return (player, sequence[nTurns])



# Dices
class Dice(VGroup):
  CONFIG = {
      "face": 1,
  }
  def __init__(self, **kwargs):
    digest_config(self, kwargs)
    diceFrame = RoundedRectangle(height=.5, width=.5, corner_radius=.08).set_stroke(width=1.85)
    points = [Dot(radius=.047, fill_opacity=1) for _ in range(self.face)]
    self.setup_points(diceFrame, points)
    VGroup.__init__(self, diceFrame, *points)

  def get_face(self):
    return self.face
  
  def setup_points(self, diceFrame, points):
    if self.face == 1:
      points[0].move_to(diceFrame.get_center())
    else:
      points[0].move_to(diceFrame, aligned_edge=UL, coor_mask=np.array([0.67, 0.67, 1]))
      points[1].move_to(diceFrame, aligned_edge=DR, coor_mask=np.array([0.67, 0.67, 1]))
      if self.face==3 or self.face==5:
        points[2].move_to(diceFrame.get_center())
        if self.face==5:
          points[3].move_to(diceFrame, aligned_edge=UR, coor_mask=np.array([0.67, 0.67, 1]))
          points[4].move_to(diceFrame, aligned_edge=DL, coor_mask=np.array([0.67, 0.67, 1]))
      if self.face==4 or self.face==6:
        points[2].move_to(diceFrame, aligned_edge=UR, coor_mask=np.array([0.67, 0.67, 1]))
        points[3].move_to(diceFrame, aligned_edge=DL, coor_mask=np.array([0.67, 0.67, 1]))
        if self.face==6:
          points[4].move_to(diceFrame, aligned_edge=LEFT, coor_mask=np.array([0.67, 0.67, 1]))
          points[5].move_to(diceFrame, aligned_edge=RIGHT, coor_mask=np.array([0.67, 0.67, 1]))



# Pair of dices
class DicePair(VGroup):
  CONFIG = {
      "faces": (1,1),
  }
  def __init__(self, **kwargs):
    digest_config(self, kwargs)
    dice1 = Dice(face=self.faces[0])
    dice2 = Dice(face=self.faces[1])
    VGroup.__init__(self, dice1, dice2)
    self.arrange_self()
  def arrange_self(self):
    self.arrange(RIGHT, buff=0.05)
  def get_faces(self):
    return self.faces


